@model LocationDetail
@{
    ViewData["Title"] = "Map";

}

<html>
<head>
    <style>
                /* Set the size of the div element that contains the map */
        #map {
            height: 400px; /* The height is 400 pixels */
            width: 100%;
            /* The width is the width of the web page */
        }
<<<<<<< HEAD

        .mapGrid {
            display: grid;
            position: relative;
            z-index: 1; /* The z-index should be higher than Google Maps */
            width: auto;
            height: auto;
            opacity: .45; /* Set the opacity for a slightly transparent Google Form */
            color: white;
            grid-template-columns: 2fr 5fr;
            grid-template-areas: "searchBar the_void"
        }

        .searchBar {
            grid-area: searchBar;
            background: black;
            height: auto;
            width: 20%;
            position:absolute;
            opacity: .8;
        }

        .searchBarInfo {
            display: flex;

            flex-direction: column;
        }

        #the_void {
            display:none;
        }



=======
>>>>>>> 2e77b1d9f611c408770148b2afd13f8e781f40f4
    </style>
</head>
<body>
    <div id="map"></div>
    <script>
        var map;
        // var cleveland = { lat: 41.4993, lng: -81.6944 };
        var origin = "@Model.Origin";
        var originLat = 0;
        var originLng = 0;
        
        
        function getlatlng() {

            var address1 = origin
            var city = "Cleveland";
            var state = "OH";


            var address = address1 + ',' + city + ',' + state;
            console.log(address);

            var APIUrl = "https://maps.googleapis.com/maps/api/geocode/json?address=" + address + "&key=AIzaSyAKzhMLUvwCaJupiGu-cNLevQG_Hl3DIcw";

            return console.log(APIUrl);

            fetch(APIUrl, {
                method: "GET",
                body: JSON
            })
                .then((response) => {
                    return response.json()
                })
                .then((data) => {
                    originLat = data.results[0].geometry.location.lat,
                    originLng = data.results[0].geometry.location.lng
                });



            //$.getJSON(APIUrl, function (data) {
            //    console.log(data.results[0].geometry.location.lat),

            //    originLat = data.results[0].geometry.location.lat,
            //    originLng = data.results[0].geometry.location.lng

            //});

            return console.log(originLat, originLng);
        }


        function initMap() {
            // Create the map.
<<<<<<< HEAD
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: originLat, lng: originLng },
=======
            var origin = 'Dealer Tire Cleveland Ohio';
            map = new google.maps.Map(document.getElementById('map'), {
                center: origin,
            var techElevator = { lat: 41.503756, lng: -81.638892 };
            map = new google.maps.Map(document.getElementById('map'), {
                center: techElevator,
>>>>>>> 2e77b1d9f611c408770148b2afd13f8e781f40f4
                zoom: 15,
                minZoom: 11,
                maxZoom: 18
            });


            // Bounds for WalkCLE
            var allowedBounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(41.459287, -81.716830),
                new google.maps.LatLng(41.584380, -81.575907));

            var lastValidCenter = map.getCenter();

            google.maps.event.addListener(map, 'center_changed', function () {
                if (allowedBounds.contains(map.getCenter())) {
                    // still within valid bounds, so save the last valid position
                    lastValidCenter = map.getCenter();
                    return;
                }

                // not valid anymore => return to last valid position
                map.panTo(lastValidCenter);
            });

<<<<<<< HEAD
            //var marker = new google.maps.Marker({
            //    position: cleveland,
            //    map: map,
            //    title: 'Elevate Yourself!'
            //});

=======
>>>>>>> 2e77b1d9f611c408770148b2afd13f8e781f40f4
            // Create the places service.
            var service = new google.maps.places.PlacesService(map);
            var getNextPage = null;
            var moreButton = document.getElementById('more');
            moreButton.onclick = function () {
                moreButton.disabled = true;
                if (getNextPage) getNextPage();
            };

            // Perform a nearby search.
            service.nearbySearch(
<<<<<<< HEAD
                // location: was cleveland hard code

                { location: { lat: originLat, lng: originLng }, rankBy: google.maps.places.RankBy.DISTANCE, type: ['@Model.Type'] },
=======
                { location: techElevator, radius: 3218, type: ['@Model.Type'] },
>>>>>>> 2e77b1d9f611c408770148b2afd13f8e781f40f4
                function (results, status, pagination) {
                    if (status !== 'OK') return;

                    createMarkers(results);
                    moreButton.disabled = !pagination.hasNextPage;
                    getNextPage = pagination.hasNextPage && function () {
                        pagination.nextPage();
                    };
                });
        }

        function createMarkers(places) {
            var bounds = new google.maps.LatLngBounds();
            var placesList = document.getElementById('places');

            for (var i = 0, place; place = places[i]; i++) {
                var image = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                var marker = new google.maps.Marker({
                    map: map,
                    icon: image,
                    title: place.name,
                    position: place.geometry.location
                });

                var li = document.createElement('li');
                li.textContent = place.name;
                placesList.appendChild(li);

                bounds.extend(place.geometry.location);
            }
            map.fitBounds(bounds);
        }

    </script>

<<<<<<< HEAD

        <div class="searchBar">
            <h2>Results</h2>
            <ul id="places"></ul>
            <button id="more">More results</button>
        </div>
=======
    <div id="right-panel">
        <h2>Results</h2>
        <ul id="places"></ul>
        <button id="more">More results</button>
    </div>
>>>>>>> 2e77b1d9f611c408770148b2afd13f8e781f40f4



    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAKzhMLUvwCaJupiGu-cNLevQG_Hl3DIcw&libraries=places&callback=initMap" async defer></script>
</body>
</html>
