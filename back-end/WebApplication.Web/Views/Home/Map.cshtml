@model MapStuff
@{
    ViewData["Title"] = "Map";

}

<html>
<head>
    <style>
                /* Set the size of the div element that contains the map */
        #map {
            height: 100%;
            width: 100%;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 0;
            /* The width is the width of the web page */
        }

        .mapGrid {
            display: grid;
            position: relative;
            z-index: 1; /* The z-index should be higher than Google Maps */
            width: auto;
            height: auto;
            opacity: .45; /* Set the opacity for a slightly transparent Google Form */
            color: white;
            grid-template-columns: 2fr 5fr;
            grid-template-areas: "searchBar the_void"
        }

        .searchBar {
            grid-area: searchBar;
            height: auto;
            width: 20%;
            position: absolute;
            opacity: .9;
            z-index: 2;
            background-color: var(--black);
            color: var(--blue);
            font-weight: bold;
            padding: 10px;
            line-height: 1.45em;
        }

        .searchBar a {
            color: var(--blue);
        }

        .searchBar h2 {
            color: var(--tan);
        }

        .searchBar button {
            color: var(--black);
        }

        .searchBarInfo {
            display: flex;

            flex-direction: column;
        }

        #the_void {
            display:none;
        }

        .body-content {
            margin: 0;
        }

    </style>
</head>
<body>
    <div id="map"></div>



    <script>
        var map;
        var cleveland = { lat: 41.4993, lng: -81.6944 };   

        

        var bucket = "~back-end/WebApplication.Web/wwwroot/images/Bucket.png";

        var origin = "@Model.Origin";
        var originLat;
        var originLng;  

        async function getlatlng() {

            var address1 = origin.replace(/ /g, '+');
            var city = "+Cleveland";
            var state = "+OH";


            var address = address1 + ',' + city + ',' + state;
            console.log(address);

            var APIUrl = "https://maps.googleapis.com/maps/api/geocode/json?address=" + address + "&key=AIzaSyAKzhMLUvwCaJupiGu-cNLevQG_Hl3DIcw";

             await $.getJSON(APIUrl, function (data) {
                originLat = data.results[0].geometry.location.lat,
                originLng = data.results[0].geometry.location.lng
            });
   
        }

                
        async function initMap() {         

            await getlatlng();

            // Create the map.
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: originLat, lng: originLng },
                zoom: 15,
                minZoom: 11,
                maxZoom: 18,
                styles: [
                    {
                        featureType: 'poi',
                        stylers: [{ visibility: 'off' }]
                    },
                    {
                        featureType: 'transit',
                        elementType: 'labels.icon',
                        stylers: [{ visibility: 'off' }]
                    }
                ]
            });


            


            // Bounds for WalkCLE
            var allowedBounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(41.459287, -81.716830),
                new google.maps.LatLng(41.584380, -81.575907));

            var lastValidCenter = map.getCenter();

            google.maps.event.addListener(map, 'center_changed', function () {
                if (allowedBounds.contains(map.getCenter())) {
                    // still within valid bounds, so save the last valid position
                    lastValidCenter = map.getCenter();
                    return;
                }

                // not valid anymore => return to last valid position
                map.panTo(lastValidCenter);
            });


            

            // Create the places service.
            var service = new google.maps.places.PlacesService(map);
            var getNextPage = null;
            var moreButton = document.getElementById('more');
            moreButton.onclick = function () {
                moreButton.disabled = true;
                if (getNextPage) getNextPage();
            };

            // Perform a nearby search.
            //var request = {
            //    location: cleveland,
            //    radius: '200',
            //    query: 'theater'
            //}

            //service = new google.maps.places.PlacesService(map)
            //service.textSearch(request, callback);

            service.nearbySearch(

                { location: { lat: originLat, lng: originLng }, rankBy: google.maps.places.RankBy.DISTANCE, type: ['@Model.Type'] },
                function (results, status, pagination) {
                    if (status !== 'OK') return;

                    createMarkers(results);
                    moreButton.disabled = !pagination.hasNextPage;
                    getNextPage = pagination.hasNextPage && function () {
                        pagination.nextPage();
                    };
                });
        }

        function createMarkers(places) {
            var bounds = new google.maps.LatLngBounds();
            var placesList = document.getElementById('places');

            for (var i = 0, place; place = places[i]; i++) {
                var image = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                var marker = new google.maps.Marker({
                    map: map,
                    icon: image,
                    title: place.name,
                    position: place.geometry.location
                });

                var li = document.createElement('li');
                li.innerHTML = `<a href="https://www.google.com/maps/search/?api=1&query=Google&query_place_id=${place.place_id}">${place.name}</a>`;
                placesList.appendChild(li);

                bounds.extend(place.geometry.location);
            }
            map.fitBounds(bounds);

            
        }

    </script>


        <div class="searchBar">
            <h2>Results</h2>
            <ul id="places"></ul>
            <button id="more">More results</button>
        </div>



    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAKzhMLUvwCaJupiGu-cNLevQG_Hl3DIcw&libraries=places&callback=initMap" async defer></script>
</body>
</html>